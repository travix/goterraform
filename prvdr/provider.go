package prvdr

import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"google.golang.org/grpc"
)

// Provider required methods on provider block.
type Provider interface {
	// DataSources method may return a list of datasource generation functions use:
	//	New<...DataSource>(exec) func() datasource.DataSource
	// from generated package.
	DataSources(ctx context.Context) []func() datasource.DataSource
	// Resources method may return a list of resource generation functions use:
	//	New<...Resource>(exec) func() resource.Resource
	// from generated package.
	Resources(ctx context.Context) []func() resource.Resource
}

// CanConfigureGrpc interface required to inject grpc clients in datasource/ resource blocks.
// Optional if none of the blocks use grpc clients.
//
// T is the protobuf message generated by protoc-gen-go.
type CanConfigureGrpc[T any] interface {
	ConfigureGrpc(ctx context.Context, data T) (grpc.ClientConnInterface, diag.Diagnostics)
}

// CanConfigure optional interface to inject configure method on provider block.
type CanConfigure interface {
	Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse)
}

// CanConfigValidators optional interface to inject config validators method on provider block.
type CanConfigValidators interface {
	ConfigValidators(context.Context) []provider.ConfigValidator
}

// CanMetadata optional interface to inject metadata method on provider block.
type CanMetadata interface {
	Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse)
}

// CanMetaSchema optional interface to inject meta schema method on provider block.
type CanMetaSchema interface {
	MetaSchema(context.Context, provider.MetaSchemaRequest, *provider.MetaSchemaResponse)
}

// CanSchema optional interface to inject schema method on provider block.
type CanSchema interface {
	Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse)
}

// CanValidateConfig optional interface to inject validate config method on provider block.
type CanValidateConfig interface {
	ValidateConfig(context.Context, provider.ValidateConfigRequest, *provider.ValidateConfigResponse)
}
